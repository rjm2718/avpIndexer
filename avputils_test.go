package avpindexer

import (
	"fmt"
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	a "gotest.tools/assert"
	"strings"
	"testing"
)

var gpacket = gopacket.NewPacket(testPacketDiameterAccountingRequest271, layers.LayerTypeDiameter, gopacket.Default)
var dial = gpacket.Layer(layers.LayerTypeDiameter)
var d = dial.(*layers.Diameter)

func TestPrint(t *testing.T) {
	PrintAvps(d)
}

func TestGet(t *testing.T) {
	ai := NewAvpIndexer(d)
	a.Equal(t, ai.GetUint32(0, 485), uint32(1))
	a.Equal(t, ai.GetUint32(132123, 999998), uint32(0))
	a.Equal(t, ai.GetUint32(10415, 2045), uint32(241))

}

func TestPathMatch(t *testing.T) {

	peA1 := pathElement{parent: nil, avpId: avpId{attrId: 1, vendorId: 2}}
	peA2 := pathElement{parent: nil, avpId: avpId{attrId: 3, vendorId: 4}}
	peB1 := pathElement{parent: nil, avpId: avpId{attrId: 1, vendorId: 2}}
	peB2 := pathElement{parent: nil, avpId: avpId{attrId: 3, vendorId: 4}}
	a.Assert(t, peA1.matches(&peB1))
	a.Assert(t, !peA2.matches(&peB1))

	peA2.parent = &peA1
	a.Assert(t, peA1.matches(&peB1))
	peA2.parent = nil
	peA1.parent = &peA2
	a.Assert(t, peA1.matches(&peB1))
	peA1.parent = nil

	a.Assert(t, peA1.matches(&peB1))
	peB1.parent = &peB2
	a.Assert(t, !peA1.matches(&peB1))
}

func TestPathMatch3(t *testing.T) {
	ai := NewAvpIndexer(d)

	a.Equal(t, ai.GetUint32(10415, 2045), uint32(241))

	a.Equal(t, ai.FromGroup(10415, 2040).GetUint32(10415, 2045), uint32(241))

	a.Equal(t, ai.FromGroup(10415, 874).FromGroup(10415, 2040).GetUint32(10415, 2045), uint32(241))

	a.Equal(t, ai.GetUint64(0, 364), uint64(3208))
	a.Equal(t, ai.GetUint64(0, 364999), uint64(0))

	a.Equal(t, ai.FromGroup(10415, 2040).GetUint64(0, 364), uint64(3208))
	a.Equal(t, ai.FromGroup(10415, 2040).GetUint64(0, 364999), uint64(0))
}

func TestAccumulate(t *testing.T) {
	ai := NewAvpIndexer(d)

	// 364: 3208 + 26694
	a.Equal(t, ai.GetUint64(0, 364), uint64(3208))

	a.Equal(t, ai.FromGroup(10415, 2040).AccumulateUint64(0, 364), uint64(3208+26694))
	a.Equal(t, ai.AccumulateUint64(0, 364), uint64(3208+26694))
}

func TestStrKeys(t *testing.T) {

	a.Equal(t, 1, 1)

	//ai.FromGroup(2,3).FromGroup(10,10415).GetUint32(4,5)

	id2 := avpId{vendorId: 0, attrId: 444}
	pe2 := pathElement{parent: nil, avpId: id2}
	a.Equal(t, id2.skey(), pe2.skey())
	a.Equal(t, id2.skey(), pe2.skey2())
	fmt.Printf(": %s\n", pe2.skey())

	id1 := avpId{attrId: 1, vendorId: 2}
	pe1 := pathElement{parent: &pe2, avpId: id1}
	a.Assert(t, strings.Contains(pe1.skey2(), pe2.skey2()))
	fmt.Printf(": %s\n", pe1.skey2())

	ai := NewAvpIndexer(d)
	fmt.Printf("\n%v\n", ai)
}

// anonymized
var testPacketDiameterAccountingRequest271 = []byte{
	0x01, 0x00, 0x05, 0x44, 0xC0, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xEC, 0x92, 0x60,
	0x6A, 0x94, 0xAE, 0x3A, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x61, 0x30, 0x30, 0x30, 0x34,
	0x2D, 0x64, 0x69, 0x61, 0x6D, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x2E, 0x6B, 0x73, 0x63, 0x79, 0x6D,
	0x6F, 0x65, 0x63, 0x2D, 0x6F, 0x62, 0x72, 0x70, 0x67, 0x77, 0x2D, 0x30, 0x31, 0x2D, 0x63, 0x73,
	0x63, 0x2E, 0x6C, 0x74, 0x65, 0x2E, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x2E, 0x63, 0x6F, 0x6D,
	0x3B, 0x31, 0x37, 0x32, 0x37, 0x32, 0x33, 0x38, 0x37, 0x32, 0x33, 0x3B, 0x31, 0x31, 0x32, 0x35,
	0x39, 0x33, 0x34, 0x31, 0x36, 0x34, 0x3B, 0x35, 0x64, 0x39, 0x63, 0x61, 0x38, 0x62, 0x62, 0x2D,
	0x33, 0x35, 0x34, 0x30, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x3C,
	0x30, 0x30, 0x30, 0x34, 0x2D, 0x64, 0x69, 0x61, 0x6D, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x2E, 0x6B,
	0x73, 0x63, 0x79, 0x6D, 0x6F, 0x65, 0x63, 0x2D, 0x6F, 0x62, 0x72, 0x70, 0x67, 0x77, 0x2D, 0x30,
	0x31, 0x2D, 0x63, 0x73, 0x63, 0x2E, 0x6C, 0x74, 0x65, 0x2E, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x74,
	0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x12, 0x73, 0x70, 0x72, 0x69,
	0x6E, 0x74, 0x2E, 0x6E, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1B, 0x40, 0x00, 0x00, 0x1F,
	0x6E, 0x6D, 0x63, 0x63, 0x2E, 0x73, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x72, 0x75, 0x6D, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x25, 0x40, 0x00, 0x00, 0x35,
	0x6D, 0x73, 0x65, 0x2D, 0x76, 0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x31, 0x34, 0x2E, 0x6F, 0x73,
	0x70, 0x72, 0x64, 0x6E, 0x32, 0x2E, 0x6E, 0x6D, 0x63, 0x63, 0x2E, 0x73, 0x70, 0x72, 0x69, 0x6E,
	0x74, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xE0, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5,
	0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x40, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, 0x31, 0x37, 0x37, 0x39,
	0x31, 0x38, 0x35, 0x30, 0x36, 0x30, 0x34, 0x31, 0x32, 0x39, 0x38, 0x00, 0x00, 0x00, 0x00, 0x55,
	0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x01, 0x16, 0x40, 0x00, 0x00, 0x0C,
	0x5C, 0xE0, 0xF9, 0x8A, 0x00, 0x00, 0x00, 0x37, 0x40, 0x00, 0x00, 0x0C, 0xE1, 0x47, 0x2B, 0x23,
	0x00, 0x00, 0x01, 0xCD, 0x40, 0x00, 0x00, 0x23, 0x34, 0x2E, 0x31, 0x32, 0x30, 0x2E, 0x33, 0x31,
	0x30, 0x2E, 0x31, 0x31, 0x2E, 0x33, 0x32, 0x32, 0x35, 0x31, 0x40, 0x33, 0x67, 0x70, 0x70, 0x2E,
	0x6F, 0x72, 0x67, 0x00, 0x00, 0x00, 0x03, 0x69, 0xC0, 0x00, 0x03, 0xA0, 0x00, 0x00, 0x28, 0xAF,
	0x00, 0x00, 0x01, 0xBB, 0x40, 0x00, 0x00, 0x28, 0x00, 0x00, 0x01, 0xC2, 0x40, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBC, 0x40, 0x00, 0x00, 0x13, 0x34, 0x31, 0x35, 0x37,
	0x36, 0x35, 0x36, 0x38, 0x38, 0x37, 0x37, 0x00, 0x00, 0x00, 0x03, 0x6A, 0xC0, 0x00, 0x03, 0x50,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0x5E, 0x9E, 0xD9, 0x13, 0x00, 0x00, 0x08, 0x10, 0xC0, 0x00, 0x00, 0x12, 0x00, 0x00, 0x28, 0xAF,
	0x53, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xCB, 0xC0, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x28, 0xAF, 0x35, 0xD1, 0xB5, 0x97, 0xE0, 0x69, 0x00, 0x00, 0x00, 0x00, 0x04, 0xCC,
	0xC0, 0x00, 0x00, 0x12, 0x00, 0x00, 0x28, 0xAF, 0x11, 0x8B, 0x4E, 0x93, 0x0C, 0xA1, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x4F, 0xC0, 0x00, 0x00, 0x12, 0x00, 0x00, 0x28, 0xAF, 0xAF, 0x0C, 0x49, 0xD4,
	0xF1, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xC0, 0x00, 0x00, 0x12, 0x00, 0x00, 0x28, 0xAF,
	0x35, 0x36, 0x33, 0x30, 0x34, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x40, 0x00, 0x00, 0x0F,
	0x78, 0x2E, 0x69, 0x73, 0x70, 0x73, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x30, 0x31, 0x30, 0x30, 0x00, 0x00, 0x00, 0x12, 0xC0, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x28, 0xAF, 0x33, 0x37, 0x38, 0x34, 0x39, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
	0xC0, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x28, 0xAF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8,
	0xC0, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x01, 0x6B, 0x40, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF4, 0x00, 0x00, 0x01, 0x6C, 0x40, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x88, 0x00, 0x00, 0x01, 0x6D, 0x40, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x6E, 0x40, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x08, 0x0F, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB0, 0x40, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF6, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0xE1, 0x47, 0x2B, 0x23, 0x00, 0x00, 0x01, 0xB7, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x04, 0xCC, 0xC0, 0x00, 0x00, 0x12, 0x00, 0x00, 0x28, 0xAF, 0x11, 0x8B, 0x4E, 0x93,
	0x0C, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFB, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0xE1, 0x47, 0x27, 0x3C, 0x00, 0x00, 0x07, 0xFC, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0xE1, 0x47, 0x28, 0x2D, 0x00, 0x00, 0x07, 0xFD, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x07, 0xF5, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0xF8, 0xC0, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x28, 0xAF,
	0x00, 0x00, 0x01, 0x6B, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xB4,
	0x00, 0x00, 0x01, 0x6C, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x46,
	0x00, 0x00, 0x01, 0x6D, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,
	0x00, 0x00, 0x01, 0x6E, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49,
	0x00, 0x00, 0x08, 0x0F, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x01, 0xB0, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0F, 0xA1, 0x00, 0x00, 0x07, 0xF6,
	0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0xE1, 0x47, 0x2B, 0x23, 0x00, 0x00, 0x01, 0xB7,
	0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x04, 0xCC, 0xC0, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x28, 0xAF, 0x11, 0x8B, 0x4E, 0x93, 0x0C, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFB,
	0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0xE1, 0x47, 0x27, 0x3C, 0x00, 0x00, 0x07, 0xFC,
	0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0xE1, 0x47, 0x29, 0x94, 0x00, 0x00, 0x07, 0xFD,
	0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x02, 0x58, 0x00, 0x00, 0x07, 0xF5,
	0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xCA,
	0x40, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x01, 0xCB, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xCC, 0x40, 0x00, 0x00, 0x18, 0x37, 0x31, 0x39, 0x39, 0x30, 0x35, 0x38, 0x38,
	0x33, 0x35, 0x31, 0x30, 0x35, 0x36, 0x36, 0x38, 0x00, 0x00, 0x07, 0xFA, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0xE1, 0x47, 0x2B, 0x23, 0x00, 0x00, 0x07, 0xF5, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0xF7, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x28, 0xAF, 0x31, 0x32, 0x33, 0x36, 0x33, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
	0xC0, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x28, 0xAF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
	0xC0, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x28, 0xAF, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
	0xC0, 0x00, 0x00, 0x19, 0x00, 0x00, 0x28, 0xAF, 0x82, 0x13, 0x01, 0x94, 0xAA, 0xF7, 0x13, 0x00,
	0x62, 0x00, 0x74, 0x25, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x6C, 0xC0, 0x00, 0x00, 0x1C,
	0x00, 0x00, 0x28, 0xAF, 0x00, 0x00, 0x03, 0x5E, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xAF,
	0x00, 0x00, 0x00, 0x09,
}
